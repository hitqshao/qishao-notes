(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{545:function(a,t,e){"use strict";e.r(t);var s=e(8),o=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"cuda-softmax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cuda-softmax"}},[a._v("#")]),a._v(" CUDA Softmax")]),a._v(" "),t("h2",{attrs:{id:"softmax-calculation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#softmax-calculation"}},[a._v("#")]),a._v(" Softmax calculation:")]),a._v(" "),t("h3",{attrs:{id:"naive-softmax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#naive-softmax"}},[a._v("#")]),a._v(" Naive softmax")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/1a949b2e-b1f3-434f-b005-3e10729d203e",alt:"image"}})]),a._v(" "),t("h3",{attrs:{id:"safe-softmax"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#safe-softmax"}},[a._v("#")]),a._v(" Safe softmax")]),a._v(" "),t("p",[a._v("Safe softmax avoid the overflow or under flow due to the exponent.\n"),t("img",{attrs:{src:"https://github.com/user-attachments/assets/8625f0c4-fa77-4305-8c6a-412ca5420aff",alt:"image"}})]),a._v(" "),t("p",[a._v("Three passes")]),a._v(" "),t("ul",[t("li",[a._v("get max")]),a._v(" "),t("li",[a._v("calc divident")]),a._v(" "),t("li",[a._v("calc element-wise normalization")])]),a._v(" "),t("h3",{attrs:{id:"online-normalizer-calculation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#online-normalizer-calculation"}},[a._v("#")]),a._v(" Online normalizer calculation")]),a._v(" "),t("p",[a._v("Two passes")]),a._v(" "),t("ul",[t("li",[a._v("get max and calc divident")]),a._v(" "),t("li",[a._v("calc element-wise normalization")])]),a._v(" "),t("p",[a._v("Online normalizer calculation for softmax\nhttps://arxiv.org/pdf/1805.02867")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/5ba08ef2-c3c8-48e2-9cfb-ff21096a0638",alt:"image"}})]),a._v(" "),t("h2",{attrs:{id:"optimization-of-softmax-has-the-following-ideas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optimization-of-softmax-has-the-following-ideas"}},[a._v("#")]),a._v(" Optimization of Softmax has the following ideas:")]),a._v(" "),t("h2",{attrs:{id:"warp-level-sync"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#warp-level-sync"}},[a._v("#")]),a._v(" warp-level sync")]),a._v(" "),t("p",[a._v("each warp can process one row."),t("br"),a._v("\nfirst step, each warp process the first 32 elements in one row."),t("br"),a._v("\nnext step, each warp processed the next 32 elements in the row, until the end of the row."),t("br"),a._v("\nThis achieves "),t("strong",[a._v("memory coalescing")]),a._v(".")]),a._v(" "),t("p",[a._v("In the last step, each thread collects correspoding subset max and divident:")]),a._v(" "),t("ul",[t("li",[a._v("thread [0] : max of (A[0],A[32],A[96]...)")]),a._v(" "),t("li",[a._v("thread [1] : max of (A[1],A[33],A[97]...)")]),a._v(" "),t("li",[a._v("thread [31]: max of (A[31],A[63],A[127]...)")])]),a._v(" "),t("p",[a._v("Now the result of 32 threads in the warp to be reduced to sum for divident and max.")]),a._v(" "),t("p",[a._v("One way is to choose one of the thread, maybe thread 0 to iterate through all 32 threads and gets the max.")]),a._v(" "),t("ul",[t("li",[a._v("use __shfl_xor_sync")])])])}),[],!1,null,null,null);t.default=o.exports}}]);