(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{482:function(n,t,s){"use strict";s.r(t);var e=s(8),a=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("details",[t("summary",[n._v("Code")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"})])]),n._v(" "),t("h2",{attrs:{id:"lowering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lowering"}},[n._v("#")]),n._v(" Lowering")]),n._v(" "),t("h3",{attrs:{id:"_1-defination-of-oprator-and-conversion-pass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-defination-of-oprator-and-conversion-pass"}},[n._v("#")]),n._v(" 1. defination of oprator and conversion pass")]),n._v(" "),t("details",[t("summary",[n._v("Code")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('       \n// include/tpu_mlir/Dialect/Tpu/IR/TpuOps.td\nclass Tpu_ConvOp<string mnemonic, list<Trait> traits = []> : Tpu_Op<mnemonic,\n    !listconcat(traits, [SupportFuseRelu,\n    DeclareOpInterfaceMethods<TypeInterface>,\n    DeclareOpInterfaceMethods<LocalGenInterface, ["BackwardH"]>])> {\n  let summary = "convolution operator";\n\n  let description = [{\n  }];\n\n  let arguments = (ins\n    AnyTensor:$input,\n    AnyTensor:$filter,\n    AnyTensorOrNone:$bias,\n    I64ArrayAttr:$kernel_shape,\n    I64ArrayAttr:$strides,\n    I64ArrayAttr:$pads, // top,left,bottom,right\n    DefaultValuedAttr<I64Attr, "1">:$group,\n    OptionalAttr<I64ArrayAttr>:$dilations,\n    OptionalAttr<I64ArrayAttr>:$inserts,\n    DefaultValuedAttr<BoolAttr, "false">:$do_relu,\n    DefaultValuedAttr<F64Attr, "-1.0">:$relu_limit,\n    //new param\n    BoolAttr:$with_bias,\n    DefaultValuedAttr<BoolAttr, "false">:$coeff_merged,\n    DefaultValuedAttr<I64Attr, "0">:$use_3ic_optimize,\n    DefaultValuedAttr<I64Attr, "0">:$kernel_zp,\n    OptionalAttr<I64ArrayAttr>:$multiplier,\n    OptionalAttr<I64ArrayAttr>:$rshift,\n    DefaultValuedAttr<Tpu_RequantModeAttr, "tpu::RequantMode::Normal">:$quant_mode,\n    OptionalAttr<Tpu_LayerGroupAttr>:$ginfo\n  );\n\n  let results = (outs AnyTensor:$output);\n  let extraClassDeclaration = [{\n    conv_attr_t parseParam();\n  }];\n}\n\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br")])])]),n._v(" "),t("details",[t("summary",[n._v("Code")]),n._v('\n```\n// include/tpu_mlir/Conversion/Passes.td\ndef ConvertTopToTpu : Pass<"convert-top-to-tpu", "ModuleOp"> {\n  let summary = "Convert top-level Top Ops to Tpu Ops";\n  let constructor = "tpu_mlir::createConvertTopToTpu()";\n  let dependentDialects = ["tpu_mlir::top::TopDialect", "tpu_mlir::tpu::TpuDialect"];\n  let options = [\n    Option<"mode", "mode", "std::string", /*default=*/"",\n           "default quantization mode: INT8/BF16/F32">,\n    Option<"qtable", "qtable", "std::string", /*default=*/"",\n           "a table of Ops that quantized to specific mode">,\n    Option<"chip", "chip", "std::string", /*default=*/"",\n           "chip: cv183x/cv182x/bm1684/bm1684x">,\n    Option<"isAsymmetric", "asymmetric", "bool", /*default=*/"false",\n           "true for asymmetric quantization, or false for symmetric">,\n  ];\n}\n```\n')]),n._v(" "),t("h3",{attrs:{id:"_2-delaration-of-lowering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-delaration-of-lowering"}},[n._v("#")]),n._v(" 2. Delaration of lowering")]),n._v(" "),t("p",[n._v("TopLowering is derived from mlir::OpRewritePattern")]),n._v(" "),t("p",[n._v("Each OPLowering will be declared.")]),n._v(" "),t("p",[n._v("include/tpu_mlir/Conversion/TopToTpu")]),n._v(" "),t("details",[t("summary",[n._v("Code")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// TopLowering.h\ntemplate <typename OpTy> class TopLowering : public OpRewritePattern<OpTy> {\npublic:\n  using OpRewritePattern<OpTy>::OpRewritePattern;\n\n  LogicalResult matchAndRewrite(OpTy opTy,\n                                PatternRewriter &rewriter) const override {\n...\n  virtual void LoweringINT8(PatternRewriter &rewriter, OpTy opTy,\n                            bool asymmetric) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringINT4(PatternRewriter &rewriter, OpTy opTy,\n                            bool asymmetric) const {\n    LoweringINT8(rewriter, opTy, asymmetric);\n  }\n  virtual void LoweringBF16(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringF16(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringF32(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringQuantized(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n                                \n}\n\n// LoweringBM1684X.h\n#define LOWERING_BM1684X(OP)                                                   \\\n  struct OP##Lowering : public TopLowering<top::OP##Op> {                      \\\n    OP##Lowering(MLIRContext *ctx) : TopLowering<top::OP##Op>(ctx) {}          \\\n    void LoweringINT8(PatternRewriter &rewriter, top::OP##Op op,               \\\n                      bool asymmetric) const override;                         \\\n    void LoweringINT4(PatternRewriter &rewriter, top::OP##Op op,               \\\n                      bool asymmetric) const override;                         \\\n    void LoweringBF16(PatternRewriter &rewriter,                               \\\n                      top::OP##Op op) const override;                          \\\n    void LoweringF16(PatternRewriter &rewriter,                                \\\n                     top::OP##Op op) const override;                           \\\n    void LoweringF32(PatternRewriter &rewriter,                                \\\n                     top::OP##Op op) const override;                           \\\n    void LoweringQuantized(PatternRewriter &rewriter,                          \\\n                           top::OP##Op op) const override;                     \\\n  };\n\nLOWERING_BM1684X(Abs)\nLOWERING_BM1684X(Add)\nLOWERING_BM1684X(AddConst)\nLOWERING_BM1684X(AvgPool)\nLOWERING_BM1684X(Cast)\nLOWERING_BM1684X(Concat)\nLOWERING_BM1684X(Conv)\nLOWERING_BM1684X(Deconv)\nLOWERING_BM1684X(Depth2Space)\nLOWERING_BM1684X(Div)\nLOWERING_BM1684X(Exp)\nLOWERING_BM1684X(Gather)\nLOWERING_BM1684X(GRU)\n\n...\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br")])])]),n._v(" "),t("p",[n._v("Then in ./lib/Conversion/TopToTpu/BM1684X/\neach operator will include a *.cpp that implement LoweringFunction.\n"),t("img",{attrs:{src:"https://github.com/user-attachments/assets/40cfb7b3-84e3-453f-8907-ee3237a1aeca",alt:"image"}})]),n._v(" "),t("details",[t("summary",[n._v("Code")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('void ConvLowering::LoweringF32(PatternRewriter &rewriter,\n                               top::ConvOp op) const {\n  rewriter.setInsertionPointAfter(op);\n  std::vector<Value> operands;\n  const int nInputs = op->getNumOperands();\n  for (auto i = 0; i < nInputs; ++i) {\n    operands.push_back(op->getOperand(i));\n  }\n  std::vector<NamedAttribute> attrs;\n  for (auto &attr : op->getAttrs()) {\n    attrs.push_back(attr);\n  }\n  bool with_bias = !op.getBias().getType().isa<mlir::NoneType>();\n  attrs.push_back(\n      rewriter.getNamedAttr("with_bias", rewriter.getBoolAttr(with_bias)));\n  auto newValue =\n      CreateConvOp(rewriter, op.getKernelShape().size(), op->getLoc(),\n                   op.getOutput().getType(), operands, attrs);\n  rewriter.replaceOp(op, {newValue});\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);