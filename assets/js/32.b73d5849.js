(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{483:function(s,t,e){"use strict";e.r(t);var n=e(8),a=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"chapter-1-toy-language-and-ast"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1-toy-language-and-ast"}},[s._v("#")]),s._v(" Chapter 1. Toy Language and AST")]),s._v(" "),t("p",[s._v("Lexer and recursive descent parser construt AST")]),s._v(" "),t("h3",{attrs:{id:"chapter-2-emit-basic-mlir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-emit-basic-mlir"}},[s._v("#")]),s._v(" Chapter 2. Emit Basic MLIR")]),s._v(" "),t("p",[s._v("Operations: instructions, globals(functions), modules, in LLVM")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/user-attachments/assets/1547200e-1e13-4075-b202-77be37cf0b74",alt:"image"}}),s._v("\nFrom "),t("a",{attrs:{href:"https://medium.com/sniper-ai/mlir-tutorial-create-your-custom-dialect-lowering-to-llvm-ir-dialect-system-1-1f125a6a3008",target:"_blank",rel:"noopener noreferrer"}},[s._v("link"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("Transpose Operation")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('%t_tensor = "toy.transpose"(%tensor) {inplace = true} : (tensor<2x3xf64>) ->\ntensor<3x2xf64> loc("example/file/path":12:1)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("meaning of each part")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("result  = name of operation (input operands) dictionary of traits :\ntype of operations (input and output), location\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("A name for the operation.")]),s._v(" "),t("li",[s._v("A list of SSA operand values.")]),s._v(" "),t("li",[s._v("A list of attributes.")]),s._v(" "),t("li",[s._v("A list of types for result values.")]),s._v(" "),t("li",[s._v("A source location for debugging purposes.")]),s._v(" "),t("li",[s._v("A list of successors blocks (for branches, mostly).")]),s._v(" "),t("li",[s._v("A list of regions (for structural operations like functions).")])]),s._v(" "),t("p",[t("strong",[s._v("Opaque API")])]),s._v(" "),t("p",[t("strong",[s._v("Define a Toy Dialect")])]),s._v(" "),t("p",[s._v("dialect could be defined by c++ or tablegen(declarative specification).")]),s._v(" "),t("p",[s._v("after the definiation, it could be loaded to MLIR Context.\ncontext.loadDialect"),t("ToyDialect",[s._v("();")])],1),s._v(" "),t("p",[t("strong",[s._v("Defining Toy Operations")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class ConstantOp : public mlir::Op<\n                     /// `mlir::Op` is a CRTP class, meaning that we provide the\n                     /// derived class as a template parameter.\n                     ConstantOp,\n                     /// The ConstantOp takes zero input operands.\n                     mlir::OpTrait::ZeroOperands,\n                     /// The ConstantOp returns a single result.\n                     mlir::OpTrait::OneResult,\n                     /// We also provide a utility `getType` accessor that\n                     /// returns the TensorType of the single result.\n                     mlir::OpTraits::OneTypedResult<TensorType>::Impl> {\n\n public:\n  /// Inherit the constructors from the base Op class.\n  using Op::Op;\n  ...\n  static void build(mlir::OpBuilder &builder, mlir::OperationState &state,\n                    mlir::Type result, mlir::DenseElementsAttr value);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("register operation:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("void ToyDialect::initialize() {\n  addOperations<ConstantOp>();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("Op vs Operation: Using MLIR Operations")])]),s._v(" "),t("p",[t("strong",[s._v("Using Operation Definition Specification Framwork")])]),s._v(" "),t("p",[s._v("base Toy_Op")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Toy_Op<string mnemonic, list<Trait> traits = []> :\n    Op<Toy_Dialect, mnemonic, traits>;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("ConstantOp")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('def ConstantOp : Toy_Op<"constant"> {\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("Attaching build Methods")])]),s._v(" "),t("p",[s._v("In ConstantOp, it declared a list of build. ODS will generate the first build."),t("br"),s._v("\nAs to other builds, we have to atttach.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('def ConstantOp : Toy_Op<"constant"> {\n  ...\n\n  // Add custom build methods for the constant operation. These methods populate\n  // the `state` that MLIR uses to create operations, i.e. these are used when\n  // using `builder.create<ConstantOp>(...)`.\n  let builders = [\n    // Build a constant with a given constant tensor value.\n    OpBuilder<(ins "DenseElementsAttr":$value), [{\n      // Call into an autogenerated `build` method.\n      build(builder, result, value.getType(), value);\n    }]>,\n\n    // Build a constant with a given constant floating-point value. This builder\n    // creates a declaration for `ConstantOp::build` with the given parameters.\n    OpBuilder<(ins "double":$value)>\n  ];\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("Specifying a Custom Assembly Format")])]),s._v(" "),t("p",[s._v("The printout version of IR has too much information.")]),s._v(" "),t("p",[s._v("We can strip out by implementing our owne oversion of print and parse function.")]),s._v(" "),t("p",[s._v("Take PrintOp as example.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('void PrintOp::print(mlir::OpAsmPrinter &printer) {\n  printer << "toy.print " << op.input();\n  printer.printOptionalAttrDict(op.getAttrs());\n  printer << " : " << op.input().getType();\n}\n\nmlir::ParseResult PrintOp::parse(mlir::OpAsmParser &parser,\n                                 mlir::OperationState &result) {\n...\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);