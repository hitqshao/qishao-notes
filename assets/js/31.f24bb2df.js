(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{482:function(t,e,r){"use strict";r.r(e);var n=r(8),a=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("details",[e("summary",[t._v("Code")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code")]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"})])]),t._v(" "),e("h2",{attrs:{id:"lowering"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lowering"}},[t._v("#")]),t._v(" Lowering")]),t._v(" "),e("h3",{attrs:{id:"_1-defination-of-oprator-and-conversion-pass"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-defination-of-oprator-and-conversion-pass"}},[t._v("#")]),t._v(" 1. defination of oprator and conversion pass")]),t._v(" "),e("details",[e("summary",[t._v("Code")]),t._v("\n```\n// include/tpu_mlir/Dialect/Tpu/IR/TpuOps.td\nclass Tpu_ConvOp"),e("Trait",[t._v(" traits = []> : Tpu_Op"),e("TypeInterface",[t._v(",\n    DeclareOpInterfaceMethods"),t._v('"BackwardH"]>])> {\n  let summary = "convolution operator";\n'),e("p",[t._v("let description = [{\n}];")]),t._v(" "),e("p",[t._v('let arguments = (ins\nAnyTensor:$input,\nAnyTensor:$filter,\nAnyTensorOrNone:$bias,\nI64ArrayAttr:$kernel_shape,\nI64ArrayAttr:$strides,\nI64ArrayAttr:$pads, // top,left,bottom,right\nDefaultValuedAttr<I64Attr, "1">:$group,\nOptionalAttr'),e("I64ArrayAttr",[t._v(":$dilations,\nOptionalAttr"),e("I64ArrayAttr",[t._v(':$inserts,\nDefaultValuedAttr<BoolAttr, "false">:$do_relu,\nDefaultValuedAttr<F64Attr, "-1.0">:$relu_limit,\n//new param\nBoolAttr:$with_bias,\nDefaultValuedAttr<BoolAttr, "false">:$coeff_merged,\nDefaultValuedAttr<I64Attr, "0">:$use_3ic_optimize,\nDefaultValuedAttr<I64Attr, "0">:$kernel_zp,\nOptionalAttr'),e("I64ArrayAttr",[t._v(":$multiplier,\nOptionalAttr"),e("I64ArrayAttr",[t._v(':$rshift,\nDefaultValuedAttr<Tpu_RequantModeAttr, "tpu::RequantMode::Normal">:$quant_mode,\nOptionalAttr<Tpu_LayerGroupAttr>:$ginfo\n);')])],1)],1)],1)],1),t._v(" "),e("p",[t._v("let results = (outs AnyTensor:$output);\nlet extraClassDeclaration = [{\nconv_attr_t parseParam();\n}];\n}")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\n<details>\n<summary>Code</summary>\n       \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v('// include/tpu_mlir/Conversion/Passes.td\ndef ConvertTopToTpu : Pass<"convert-top-to-tpu", "ModuleOp"> {\nlet summary = "Convert top-level Top Ops to Tpu Ops";\nlet constructor = "tpu_mlir::createConvertTopToTpu()";\nlet dependentDialects = ["tpu_mlir:üîù:TopDialect", "tpu_mlir::tpu::TpuDialect"];\nlet options = [\nOption<"mode", "mode", "std::string", /'),e("em",[t._v("default=")]),t._v('/"",\n"default quantization mode: INT8/BF16/F32">,\nOption<"qtable", "qtable", "std::string", /'),e("em",[t._v("default=")]),t._v('/"",\n"a table of Ops that quantized to specific mode">,\nOption<"chip", "chip", "std::string", /'),e("em",[t._v("default=")]),t._v('/"",\n"chip: cv183x/cv182x/bm1684/bm1684x">,\nOption<"isAsymmetric", "asymmetric", "bool", /'),e("em",[t._v("default=")]),t._v('/"false",\n"true for asymmetric quantization, or false for symmetric">,\n];\n}')]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\ninclude/tpu_mlir/Conversion/TopToTpu\n\n<details>\n<summary>Code</summary>\n       \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("// TopLowering.h\ntemplate "),e("typename",{attrs:{OpTy:""}},[t._v(" class TopLowering : public OpRewritePattern"),e("OpTy",[t._v(" {\npublic:\nusing OpRewritePattern"),e("OpTy",[t._v("::OpRewritePattern;")])],1)],1)],1),t._v(" "),e("p",[t._v('LogicalResult matchAndRewrite(OpTy opTy,\nPatternRewriter &rewriter) const override {\n...\nvirtual void LoweringINT8(PatternRewriter &rewriter, OpTy opTy,\nbool asymmetric) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringINT4(PatternRewriter &rewriter, OpTy opTy,\nbool asymmetric) const {\nLoweringINT8(rewriter, opTy, asymmetric);\n}\nvirtual void LoweringBF16(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringF16(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringF32(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringQuantized(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}')]),t._v(" "),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("// LoweringBM1684X.h\n#define LOWERING_BM1684X(OP)                                                   "),e("br"),t._v("\nstruct OP##Lowering : public TopLowering"),e("a",{attrs:{href:"top::OP##Op"}},[t._v("top::OP##Op")]),t._v(" {                      "),e("br"),t._v("\nOP##Lowering(MLIRContext *ctx) : TopLowering"),e("a",{attrs:{href:"top::OP##Op"}},[t._v("top::OP##Op")]),t._v("(ctx) {}          "),e("br"),t._v("\nvoid LoweringINT8(PatternRewriter &rewriter, top::OP##Op op,               "),e("br"),t._v("\nbool asymmetric) const override;                         "),e("br"),t._v("\nvoid LoweringINT4(PatternRewriter &rewriter, top::OP##Op op,               "),e("br"),t._v("\nbool asymmetric) const override;                         "),e("br"),t._v("\nvoid LoweringBF16(PatternRewriter &rewriter,                               "),e("br"),t._v("\ntop::OP##Op op) const override;                          "),e("br"),t._v("\nvoid LoweringF16(PatternRewriter &rewriter,                                "),e("br"),t._v("\ntop::OP##Op op) const override;                           "),e("br"),t._v("\nvoid LoweringF32(PatternRewriter &rewriter,                                "),e("br"),t._v("\ntop::OP##Op op) const override;                           "),e("br"),t._v("\nvoid LoweringQuantized(PatternRewriter &rewriter,                          "),e("br"),t._v("\ntop::OP##Op op) const override;                     "),e("br"),t._v("\n};")]),t._v(" "),e("p",[t._v("LOWERING_BM1684X(Abs)\nLOWERING_BM1684X(Add)\nLOWERING_BM1684X(AddConst)\nLOWERING_BM1684X(AvgPool)\nLOWERING_BM1684X(Cast)\nLOWERING_BM1684X(Concat)\nLOWERING_BM1684X(Conv)\nLOWERING_BM1684X(Deconv)\nLOWERING_BM1684X(Depth2Space)\nLOWERING_BM1684X(Div)\nLOWERING_BM1684X(Exp)\nLOWERING_BM1684X(Gather)\nLOWERING_BM1684X(GRU)")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])])])],1)],1)])}),[],!1,null,null,null);e.default=a.exports}}]);