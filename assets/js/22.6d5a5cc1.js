(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{432:function(e,t,s){"use strict";s.r(t);var a=s(5),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"chap6-the-backend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chap6-the-backend"}},[e._v("#")]),e._v(" Chap6. The Backend")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/a5566aac-5d9f-40c4-810b-ec6572a3e94f",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("White box")]),e._v(" Essential\n"),t("strong",[e._v("Gray Block")]),e._v(" For generated code efficiency")]),e._v(" "),t("h4",{attrs:{id:"_1-instructon-selection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-instructon-selection"}},[e._v("#")]),e._v(" 1. Instructon Selection"),t("br")]),e._v(" "),t("ul",[t("li",[e._v("Convert IR to target-specific SelectionDAG(Directed Acyclic Graph)\n"),t("ul",[t("li",[e._v("Block->DAG")]),e._v(" "),t("li",[e._v("Instruction->Node")]),e._v(" "),t("li",[e._v("Edge contains dataflow dependence and control dependence and glue.")])])]),e._v(" "),t("li",[e._v("LLVM use DAG to employ tree-based pattern-matching instruction selection.")]),e._v(" "),t("li",[e._v("IN the end of this phase, IR node are converted to target-machine(machine instructions) nodes.")])]),e._v(" "),t("h4",{attrs:{id:"_2-pre-register-allocation-ra-scheduling-the-first-instruction-scheduling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-pre-register-allocation-ra-scheduling-the-first-instruction-scheduling"}},[e._v("#")]),e._v(" 2. Pre-register Allocation(RA) scheduling,the first instruction scheduling."),t("br")]),e._v(" "),t("ul",[t("li",[e._v("This is to explore instruction-level parallelism")]),e._v(" "),t("li",[e._v("The instructions are converted to MachineInstr three-address representation.")])]),e._v(" "),t("h4",{attrs:{id:"_3-reguster-allocation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-reguster-allocation"}},[e._v("#")]),e._v(" 3. Reguster Allocation"),t("br")]),e._v(" "),t("h4",{attrs:{id:"_4-post-register-allocation-ra-instruction-scheduling-the-second-instruction-scheduling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-post-register-allocation-ra-instruction-scheduling-the-second-instruction-scheduling"}},[e._v("#")]),e._v(" 4. Post-register Allocation(RA) Instruction Scheduling, the second instruction scheduling")]),e._v(" "),t("ul",[t("li",[e._v("Now we have real register information, we can combine information of extra hazards and delays of real register to opmitize code.")])]),e._v(" "),t("h4",{attrs:{id:"_5-code-emission"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-code-emission"}},[e._v("#")]),e._v(" 5. Code Emission")]),e._v(" "),t("ul",[t("li",[e._v("Convert MachineInstr to MCInst")]),e._v(" "),t("li",[e._v("Emit Assembly Code")]),e._v(" "),t("li",[e._v("Emit Binary blobs to object code format")])]),e._v(" "),t("h3",{attrs:{id:"using-the-backend-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using-the-backend-tools"}},[e._v("#")]),e._v(" Using the backend tools")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("llc *bc -o *.s\nllc *.bc -filetype=obj -o *.o\n\nllc *.bc -march=mips -filetype=obj -o *.o\n\n// how march options\nllc -version\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h3",{attrs:{id:"learning-backend-struture"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learning-backend-struture"}},[e._v("#")]),e._v(" Learning backend struture")]),e._v(" "),t("ul",[t("li",[e._v("CodeGen: Instruction selection, scheduler,register allocation")]),e._v(" "),t("li",[e._v("MC: assembly parser, disassembler")]),e._v(" "),t("li",[e._v("TableGen")]),e._v(" "),t("li",[e._v("Target/*.cpp *.h *.td")])]),e._v(" "),t("p",[e._v("Notice:\n"),t("strong",[e._v("IselDAGtoDAG is for instruction selection.")]),e._v(" "),t("br"),e._v(" "),t("strong",[e._v("IselLowering is for Selection DAG Node lowering")]),e._v(" "),t("br")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/723f687b-0303-4add-89ea-5fe88676049c",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"knowing-backend-libraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#knowing-backend-libraries"}},[e._v("#")]),e._v(" Knowing backend libraries")]),e._v(" "),t("ul",[t("li",[t("Target",[e._v("AsmParser.a\n")])],1),e._v(" "),t("li",[t("Target",[e._v("AsmPrinter.a\n")])],1),e._v(" "),t("li",[t("Target",[e._v("CodeGen.a\n"),t("ul",[t("li",[e._v("majority of the target-dependent functionality of the backend, as followingï¼š")]),e._v(" "),t("li",[e._v("specific register handling rules, instruction selection, and scheduling")])])])],1),e._v(" "),t("li",[t("Target",[e._v("Desc.a\n"),t("ul",[t("li",[e._v("low-level MC infrastructure and is responsible for registering target-specific MC objects such as MCCodeEmitter")])])])],1),e._v(" "),t("li",[t("Target",[e._v("Info.a\n")])],1),e._v(" "),t("li",[t("Target",[e._v("Disassembler.a\n")])],1)]),e._v(" "),t("h3",{attrs:{id:"learning-how-to-use-tablegen-for-llvm-backends"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learning-how-to-use-tablegen-for-llvm-backends"}},[e._v("#")]),e._v(" Learning how to use TableGen for LLVM backends")]),e._v(" "),t("ul",[t("li",[e._v("instruction formats,")]),e._v(" "),t("li",[e._v("instructions,")]),e._v(" "),t("li",[e._v("registers,")]),e._v(" "),t("li",[e._v("pattern-matching DAGs,")]),e._v(" "),t("li",[e._v("instruction selection matching order,")]),e._v(" "),t("li",[e._v("calling conventions,")]),e._v(" "),t("li",[e._v("target CPU properties (supported Instruction Set Architecture (ISA) features and processor families).")])]),e._v(" "),t("p",[e._v("insns.td\n"),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/e85b4512-f6d2-475d-bb4b-7fdb6a2bf8e8",alt:"image"}})]),e._v(" "),t("p",[e._v("Generate code using llvm-tblgen\n"),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/843b44f4-7d07-470d-85f8-5ff7c3aa167d",alt:"image"}})]),e._v(" "),t("p",[t("strong",[e._v("Target Properties: "),t("Target",[e._v(".td")])],1),t("br"),e._v(" "),t("strong",[e._v("Registers: "),t("Target",[e._v("RegisterInfo.td")])],1),e._v(" "),t("br")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ cd <llvm_source>/lib/Target/X86\n$ llvm-tblgen -gen-register-info X86.td -I ../../../include\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("Instruction format: "),t("Target",[e._v("InstrFormat.td")])],1),e._v(" "),t("br"),e._v(" "),t("strong",[e._v("Instructions: "),t("Target",[e._v("InstrInfo.td")])],1),e._v(" "),t("br")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("include/llvm/Target/Target.td\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/89ae29d2-9a4d-4466-98a9-c1af119fb056",alt:"image"}})]),e._v(" "),t("p",[e._v("dag in the above picture represents selectDAG for opcodes, registers or constants during instruction selection phase."),t("br")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("SparcInstrInfo.td\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/6b733913-3755-4a66-acb0-a78958033216",alt:"image"}})]),e._v(" "),t("p",[e._v("We can get how the template parameters are assigned to class Instruction.")]),e._v(" "),t("ul",[t("li",[e._v("OutOperandList")]),e._v(" "),t("li",[e._v("InOperandList")]),e._v(" "),t("li",[e._v("AsmString")]),e._v(" "),t("li",[e._v("Pattern")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cd <llvm_sources>/lib/Target/Sparc\nllvm-tblgen -print-records Sparc.td -I ../../../include | grep XNORrr -A 10\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("The difference between the first and second need to be checked.")])]),e._v(" "),t("ul",[t("li",[t("Target",[e._v("GenDAGISel.inc \n")])],1),e._v(" "),t("li",[t("Target",[e._v("GenInstrInfo.inc\n")])],1),e._v(" "),t("li",[t("Target",[e._v("GenAsmWriter.inc\n")])],1),e._v(" "),t("li",[t("Target",[e._v("GenCodeEmitter.inc\n")])],1),e._v(" "),t("li",[t("Target",[e._v("GenDisassemblerTables.inc\n")])],1),e._v(" "),t("li",[t("Target",[e._v("GenAsmMatcher.inc\n")])],1)]),e._v(" "),t("h3",{attrs:{id:"instruction-selection-phase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instruction-selection-phase"}},[e._v("#")]),e._v(" Instruction Selection Phase")]),e._v(" "),t("p",[e._v("LLVM IR -> SelectionDAG(SDNode)")]),e._v(" "),t("ol",[t("li",[e._v("Create DAG, in which node carry IR op")]),e._v(" "),t("li",[e._v("Nodes go through lowering, DAG combiner, and legalization phases.")]),e._v(" "),t("li",[e._v("Instruction selection perform DAG-to-DAG conversion, using node pattern matching and transforms SelectionDAG node into nodes representing target instructions.")])]),e._v(" "),t("p",[t("strong",[e._v("Most expensive ones in backend")])]),e._v(" "),t("h4",{attrs:{id:"selectiondag-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selectiondag-class"}},[e._v("#")]),e._v(" SelectionDAG class")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("DAG for each basic block")])]),e._v(" "),t("li",[t("p",[e._v("SDNode for instruction or operand\n"),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/db628254-20e9-4df5-9748-cea3770dd65a",alt:"image"}})])]),e._v(" "),t("li",[t("p",[e._v("The black arrows represent regular edges showing a dataflow dependence.")])]),e._v(" "),t("li",[t("p",[e._v("The dashed blue arrows represent non-dataflow chains that exist to enforce order between two otherwise unrelated instructions.")])]),e._v(" "),t("li",[t("p",[e._v("The red edge guarantees that its adjacent nodes must be glued together")])])]),e._v(" "),t("p",[e._v("Please notice:")]),e._v(" "),t("ul",[t("li",[e._v("CopyFromReg: This is for getting value out of scope.")]),e._v(" "),t("li",[e._v("CopyToReg: "),t("strong",[e._v("This node copies a value to a specific register without supplying any concrete value for other nodes to consume.")])])]),e._v(" "),t("h3",{attrs:{id:"lowering"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lowering"}},[e._v("#")]),e._v(" Lowering")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/7c647ecf-0ad6-4540-896c-fc2da6c760c5",alt:"image"}})]),e._v(" "),t("ol",[t("li",[e._v("SelectionDAGBuilder in SelectionDAGIsel.cpp visits every fuction and creates SelectionDAG for each basic block")]),e._v(" "),t("li",[e._v("During 1), special IR such as call and ret needs "),t("strong",[e._v("TargetLowering")]),e._v(" class for the first time for info like: pass call arg and how to return.")]),e._v(" "),t("li",[e._v("Only a smalle subset are lowered in this way. Majority are matched and replaces at "),t("strong",[e._v("instruction selection.")])])]),e._v(" "),t("blockquote",[t("p",[e._v("For instance, in SelectionDAG from sum.bc, the X86TargetLowering::LowerReturn() method (see lib/Target/X86/X86ISelLowering.cpp) is used to lower the IR ret instruction."),t("br"),e._v("\nWhile doing this, it generates the X86ISD::RET_FLAG node, which copies the function result to EAX a-target-specific way to handle the function return.")])]),e._v(" "),t("h3",{attrs:{id:"dag-combine-and-legalization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-combine-and-legalization"}},[e._v("#")]),e._v(" DAG Combine and legalization")]),e._v(" "),t("ul",[t("li",[e._v("DAG Combine\n"),t("ul",[t("li",[e._v("Optimization for simpler code")]),e._v(" "),t("li",[e._v("Target Independent: lib/CodeGen/SelectionDAG/DAGCombiner.cpp")]),e._v(" "),t("li",[e._v("Target Dependnet: lib/Target/<Target_Name>/"),t("Target",[e._v("ISelLowering.cpp setTargetDAGCombine()")])],1)])])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("setTargetDAGCombine({ISD::SDIVREM, ISD::UDIVREM, ISD::SELECT, ISD::AND,\n                       ISD::OR, ISD::ADD, ISD::SUB, ISD::AssertZext, ISD::SHL});\n\nstatic SDValue performADDCombine(SDNode *N, SelectionDAG &DAG,\n                                 TargetLowering::DAGCombinerInfo &DCI,\n                                 const MipsSubtarget &Subtarget) {\n  ...\n  // (add v0, (add v1, abs_lo(tjt))) => (add (add v0, v1), abs_lo(tjt))\n  SDValue Add = N->getOperand(1);\n\n  if (Add.getOpcode() != ISD::ADD)\n    return SDValue();\n\n  SDValue Lo = Add.getOperand(1);\n  ...\n  EVT ValTy = N->getValueType(0);\n  SDLoc DL(N);\n\n  SDValue Add1 = DAG.getNode(ISD::ADD, DL, ValTy, N->getOperand(0),\n                             Add.getOperand(0));\n  return DAG.getNode(ISD::ADD, DL, ValTy, Add1, Lo);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br")])]),t("ul",[t("li",[e._v("Legalization")])]),e._v(" "),t("ul",[t("li",[e._v("Support legal types: scalar: promote, expand, soften. vec split, scalarized or widened")]),e._v(" "),t("li",[e._v("Also it can be customized")])]),e._v(" "),t("p",[t("strong",[e._v("Promote")]),e._v(" "),t("strong",[e._v("Expand(library call)")]),e._v(" "),t("strong",[e._v("Custom")]),e._v(" "),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/608efd69-88b3-45ca-b854-b9077c5853db",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"dag-to-dag-instruction-selection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-to-dag-instruction-selection"}},[e._v("#")]),e._v(" DAG-to-DAG instruction selection")]),e._v(" "),t("p",[e._v("Transform target-independent nodes to target-specific nodes by using pattern matching.")]),e._v(" "),t("p",[t("strong",[e._v("CopyToReg, CopyFromReg and Register")]),e._v(" nodes are untouched until "),t("strong",[e._v("Register Allocation")]),e._v(".\n"),t("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/e7221d4d-3e7d-4d32-bdb9-4c4d07c22b76",alt:"image"}})]),e._v(" "),t("h4",{attrs:{id:"pattern-matching"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pattern-matching"}},[e._v("#")]),e._v(" Pattern Matching")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lib/Target/Sparc/SparcISelDAGToDAG.cpp\n\nSelect()  in SelectionDAGISel subclass\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("Select():")]),e._v(" "),t("ul",[t("li",[e._v("receive an SDNode parameter to be matched")]),e._v(" "),t("li",[e._v("return SDNnode value representing a phycical instruction")])]),e._v(" "),t("p",[e._v("Selection() will call TableGen generateed SelectCode method."),t("br"),e._v("\nTableGen also contains MatcherTable, mapping "),t("strong",[e._v("ISD and "),t("Target",[e._v("ISD")])],1),e._v(" to "),t("strong",[e._v("physical-instruction node")]),e._v("."),t("br"),e._v("\nThis table is generated by "),t("Target",[e._v("InstrInfo.td"),t("br"),e._v("\nThe table are contained in <build_dir>/lib/Target/Sparc/SparcGenDAGISel.inc."),t("br")])],1),e._v(" "),t("p",[e._v("We can add other customized matching code prior to selectCode().")]),e._v(" "),t("p",[e._v('CurDAG->getMachineNode() will create a node with phsycial instruction SP::SPAri\nCurDAG->SelectNodeTo() will create an instruction node and changes all use of * result to point to the "Opcode" result.')]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("void SparcDAGToDAGISel::Select(SDNode *N) {\n  ...\n  case ISD::UDIV: {\n    // sdivx / udivx handle 64-bit divides.\n    if (N->getValueType(0) == MVT::i64)\n      break;\n    // FIXME: should use a custom expander to expose the SRA to the dag.\n    SDValue DivLHS = N->getOperand(0);\n    SDValue DivRHS = N->getOperand(1);\n\n    // Set the Y register to the high-part.\n    SDValue TopPart;\n    if (N->getOpcode() == ISD::SDIV) {\n      TopPart = SDValue(CurDAG->getMachineNode(SP::SRAri, dl, MVT::i32, DivLHS,\n                                   CurDAG->getTargetConstant(31, dl, MVT::i32)),\n                        0);\n    } else {\n      TopPart = CurDAG->getRegister(SP::G0, MVT::i32);\n    }\n    TopPart = CurDAG->getCopyToReg(CurDAG->getEntryNode(), dl, SP::Y, TopPart,\n                                   SDValue())\n                  .getValue(1);\n\n    // FIXME: Handle div by immediate.\n    unsigned Opcode = N->getOpcode() == ISD::SDIV ? SP::SDIVrr : SP::UDIVrr;\n    CurDAG->SelectNodeTo(N, Opcode, MVT::i32, DivLHS, DivRHS, TopPart);\n    return;\n  }\n  }\n\n  SelectCode(N);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br")])]),t("h4",{attrs:{id:"visualizing-the"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#visualizing-the"}},[e._v("#")]),e._v(" Visualizing the")]),e._v(" "),t("p",[e._v("instruction selection process")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("llc")]),e._v(" "),t("th",[e._v("Phase")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("-view-dag-combine1-dags")]),e._v(" "),t("td",[e._v("Before DAG combine 1")])]),e._v(" "),t("tr",[t("td",[e._v("-view-legalize-types-dags")]),e._v(" "),t("td",[e._v("Before legalize type")])]),e._v(" "),t("tr",[t("td",[e._v("-view-dag-combine-lt-dags")]),e._v(" "),t("td",[e._v("After legalize type 2 and before DAG combine")])]),e._v(" "),t("tr",[t("td",[e._v("-view-legalize-dags")]),e._v(" "),t("td",[e._v("Before legalization")])]),e._v(" "),t("tr",[t("td",[e._v("-view-dag-combine2-dags")]),e._v(" "),t("td",[e._v("Before DAG combine 2")])]),e._v(" "),t("tr",[t("td",[e._v("-view-isel-dags")]),e._v(" "),t("td",[e._v("Before instruction selection")])]),e._v(" "),t("tr",[t("td",[e._v("-view-sched-dags")]),e._v(" "),t("td",[e._v("After instruction selection and before scheduling")])])])]),e._v(" "),t("h3",{attrs:{id:"scheduler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduler"}},[e._v("#")]),e._v(" Scheduler")]),e._v(" "),t("p",[e._v("Pre-register allocation works on SelectionDAG nodes(SDNodes)."),t("br")]),e._v(" "),t("p",[e._v("<llvm_source>/ lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp")]),e._v(" "),t("p",[e._v("Different Algorithms: llc -pre-RA-sched="),t("scheduler")],1),e._v(" "),t("h4",{attrs:{id:"instruction-itineraries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instruction-itineraries"}},[e._v("#")]),e._v(" Instruction Itineraries")]),e._v(" "),t("p",[e._v("<llvm_source>/include/llvm/Target/TargetItinerary.td")]),e._v(" "),t("h4",{attrs:{id:"hazard-detection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hazard-detection"}},[e._v("#")]),e._v(" Hazard Detection")]),e._v(" "),t("h4",{attrs:{id:"scheduling-units"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduling-units"}},[e._v("#")]),e._v(" Scheduling Units")]),e._v(" "),t("p",[e._v("This scheduler runs before and after register allocation, which process both SDNode instruction and MachineInstr.")]),e._v(" "),t("h3",{attrs:{id:"register-allocation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#register-allocation"}},[e._v("#")]),e._v(" Register Allocation")]),e._v(" "),t("h3",{attrs:{id:"prologue-and-epilogue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prologue-and-epilogue"}},[e._v("#")]),e._v(" Prologue and epilogue")]),e._v(" "),t("h3",{attrs:{id:"understanding-machine-code-framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#understanding-machine-code-framework"}},[e._v("#")]),e._v(" Understanding machine code framework")])])}),[],!1,null,null,null);t.default=n.exports}}]);