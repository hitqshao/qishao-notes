(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{481:function(t,e,n){"use strict";n.r(e);var r=n(8),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("details",[e("summary",[t._v("Code")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code")]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"})])]),t._v(" "),e("h2",{attrs:{id:"lowering"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lowering"}},[t._v("#")]),t._v(" Lowering")]),t._v(" "),e("h3",{attrs:{id:"_1-defination-of-oprator-and-conversion-pass"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-defination-of-oprator-and-conversion-pass"}},[t._v("#")]),t._v(" 1. defination of oprator and conversion pass")]),t._v(" "),e("details",[e("summary",[t._v("Code")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('       \n// include/tpu_mlir/Dialect/Tpu/IR/TpuOps.td\nclass Tpu_ConvOp<string mnemonic, list<Trait> traits = []> : Tpu_Op<mnemonic,\n    !listconcat(traits, [SupportFuseRelu,\n    DeclareOpInterfaceMethods<TypeInterface>,\n    DeclareOpInterfaceMethods<LocalGenInterface, ["BackwardH"]>])> {\n  let summary = "convolution operator";\n\n  let description = [{\n  }];\n\n  let arguments = (ins\n    AnyTensor:$input,\n    AnyTensor:$filter,\n    AnyTensorOrNone:$bias,\n    I64ArrayAttr:$kernel_shape,\n    I64ArrayAttr:$strides,\n    I64ArrayAttr:$pads, // top,left,bottom,right\n    DefaultValuedAttr<I64Attr, "1">:$group,\n    OptionalAttr<I64ArrayAttr>:$dilations,\n    OptionalAttr<I64ArrayAttr>:$inserts,\n    DefaultValuedAttr<BoolAttr, "false">:$do_relu,\n    DefaultValuedAttr<F64Attr, "-1.0">:$relu_limit,\n    //new param\n    BoolAttr:$with_bias,\n    DefaultValuedAttr<BoolAttr, "false">:$coeff_merged,\n    DefaultValuedAttr<I64Attr, "0">:$use_3ic_optimize,\n    DefaultValuedAttr<I64Attr, "0">:$kernel_zp,\n    OptionalAttr<I64ArrayAttr>:$multiplier,\n    OptionalAttr<I64ArrayAttr>:$rshift,\n    DefaultValuedAttr<Tpu_RequantModeAttr, "tpu::RequantMode::Normal">:$quant_mode,\n    OptionalAttr<Tpu_LayerGroupAttr>:$ginfo\n  );\n\n  let results = (outs AnyTensor:$output);\n  let extraClassDeclaration = [{\n    conv_attr_t parseParam();\n  }];\n}\n\n\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br"),e("span",{staticClass:"line-number"},[t._v("34")]),e("br"),e("span",{staticClass:"line-number"},[t._v("35")]),e("br"),e("span",{staticClass:"line-number"},[t._v("36")]),e("br"),e("span",{staticClass:"line-number"},[t._v("37")]),e("br"),e("span",{staticClass:"line-number"},[t._v("38")]),e("br"),e("span",{staticClass:"line-number"},[t._v("39")]),e("br"),e("span",{staticClass:"line-number"},[t._v("40")]),e("br"),e("span",{staticClass:"line-number"},[t._v("41")]),e("br")])])]),t._v(" "),e("details",[e("summary",[t._v("Code")]),t._v('\n```\n// include/tpu_mlir/Conversion/Passes.td\ndef ConvertTopToTpu : Pass<"convert-top-to-tpu", "ModuleOp"> {\n  let summary = "Convert top-level Top Ops to Tpu Ops";\n  let constructor = "tpu_mlir::createConvertTopToTpu()";\n  let dependentDialects = ["tpu_mlir::top::TopDialect", "tpu_mlir::tpu::TpuDialect"];\n  let options = [\n    Option<"mode", "mode", "std::string", /*default=*/"",\n           "default quantization mode: INT8/BF16/F32">,\n    Option<"qtable", "qtable", "std::string", /*default=*/"",\n           "a table of Ops that quantized to specific mode">,\n    Option<"chip", "chip", "std::string", /*default=*/"",\n           "chip: cv183x/cv182x/bm1684/bm1684x">,\n    Option<"isAsymmetric", "asymmetric", "bool", /*default=*/"false",\n           "true for asymmetric quantization, or false for symmetric">,\n  ];\n}\n'),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\n### 2. Delaration of lowering\n\nTopLowering is derived from mlir::OpRewritePattern\n\nEach OPLowering will be declared.\n\ninclude/tpu_mlir/Conversion/TopToTpu\n\n<details>\n<summary>Code</summary>\n       \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br")])]),e("p",[t._v("// TopLowering.h\ntemplate "),e("typename",{attrs:{OpTy:""}},[t._v(" class TopLowering : public OpRewritePattern"),e("OpTy",[t._v(" {\npublic:\nusing OpRewritePattern"),e("OpTy",[t._v("::OpRewritePattern;")])],1)],1)],1),t._v(" "),e("p",[t._v('LogicalResult matchAndRewrite(OpTy opTy,\nPatternRewriter &rewriter) const override {\n...\nvirtual void LoweringINT8(PatternRewriter &rewriter, OpTy opTy,\nbool asymmetric) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringINT4(PatternRewriter &rewriter, OpTy opTy,\nbool asymmetric) const {\nLoweringINT8(rewriter, opTy, asymmetric);\n}\nvirtual void LoweringBF16(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringF16(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringF32(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}\nvirtual void LoweringQuantized(PatternRewriter &rewriter, OpTy opTy) const {\nllvm_unreachable("Not Implemented");\n}')]),t._v(" "),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("// LoweringBM1684X.h\n#define LOWERING_BM1684X(OP)                                                   "),e("br"),t._v("\nstruct OP##Lowering : public TopLowering"),e("a",{attrs:{href:"top::OP##Op"}},[t._v("top::OP##Op")]),t._v(" {                      "),e("br"),t._v("\nOP##Lowering(MLIRContext *ctx) : TopLowering"),e("a",{attrs:{href:"top::OP##Op"}},[t._v("top::OP##Op")]),t._v("(ctx) {}          "),e("br"),t._v("\nvoid LoweringINT8(PatternRewriter &rewriter, top::OP##Op op,               "),e("br"),t._v("\nbool asymmetric) const override;                         "),e("br"),t._v("\nvoid LoweringINT4(PatternRewriter &rewriter, top::OP##Op op,               "),e("br"),t._v("\nbool asymmetric) const override;                         "),e("br"),t._v("\nvoid LoweringBF16(PatternRewriter &rewriter,                               "),e("br"),t._v("\ntop::OP##Op op) const override;                          "),e("br"),t._v("\nvoid LoweringF16(PatternRewriter &rewriter,                                "),e("br"),t._v("\ntop::OP##Op op) const override;                           "),e("br"),t._v("\nvoid LoweringF32(PatternRewriter &rewriter,                                "),e("br"),t._v("\ntop::OP##Op op) const override;                           "),e("br"),t._v("\nvoid LoweringQuantized(PatternRewriter &rewriter,                          "),e("br"),t._v("\ntop::OP##Op op) const override;                     "),e("br"),t._v("\n};")]),t._v(" "),e("p",[t._v("LOWERING_BM1684X(Abs)\nLOWERING_BM1684X(Add)\nLOWERING_BM1684X(AddConst)\nLOWERING_BM1684X(AvgPool)\nLOWERING_BM1684X(Cast)\nLOWERING_BM1684X(Concat)\nLOWERING_BM1684X(Conv)\nLOWERING_BM1684X(Deconv)\nLOWERING_BM1684X(Depth2Space)\nLOWERING_BM1684X(Div)\nLOWERING_BM1684X(Exp)\nLOWERING_BM1684X(Gather)\nLOWERING_BM1684X(GRU)")]),t._v(" "),e("p",[t._v("...")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\n\n\nThen in ./lib/Conversion/TopToTpu/BM1684X/\neach operator will include a *.cpp that implement LoweringFunction.\n![image](https://github.com/user-attachments/assets/40cfb7b3-84e3-453f-8907-ee3237a1aeca)\n\n<details>\n<summary>Code</summary>\n       \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("void ConvLowering::LoweringF32(PatternRewriter &rewriter,\ntop::ConvOp op) const {\nrewriter.setInsertionPointAfter(op);\nstd::vector"),e("Value",[t._v(" operands;\nconst int nInputs = op->getNumOperands();\nfor (auto i = 0; i < nInputs; ++i) {\noperands.push_back(op->getOperand(i));\n}\nstd::vector"),e("NamedAttribute",[t._v(" attrs;\nfor (auto &attr : op->getAttrs()) {\nattrs.push_back(attr);\n}\nbool with_bias = !op.getBias().getType().isa"),e("a",{attrs:{href:"mlir::NoneType"}},[t._v("mlir::NoneType")]),t._v('();\nattrs.push_back(\nrewriter.getNamedAttr("with_bias", rewriter.getBoolAttr(with_bias)));\nauto newValue =\nCreateConvOp(rewriter, op.getKernelShape().size(), op->getLoc(),\nop.getOutput().getType(), operands, attrs);\nrewriter.replaceOp(op, {newValue});\n}')])],1)],1),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("</details>\n\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);