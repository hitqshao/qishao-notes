(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{422:function(e,i,t){"use strict";t.r(i);var a=t(5),n=Object(a.a)({},(function(){var e=this,i=e._self._c;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("ol",[i("li",[e._v("Holistic Performance Analysis and Optimization of Unified Virtual Holistic Performance Analysis and Optimization of Unified Virtual Memory")]),e._v(" "),i("li",[e._v("In-Depth Analyses of Unified Virtual Memory System for GPU Accelerated Computing")]),e._v(" "),i("li",[e._v("Oversubscribing GPU Unified Virtual Memory: Implications and Suggestions")]),e._v(" "),i("li",[e._v("Performance Evaluation of Advanced Features in CUDA Unified Memory")]),e._v(" "),i("li",[e._v("Interplay between Hardware Prefetcher and Page Eviction Policy in CPU-GPU Unified Virtual Memory")]),e._v(" "),i("li",[e._v("Unified Memory: GPGPU-Sim/UVM Smart Integration")]),e._v(" "),i("li",[e._v("Batch-Aware Unified Memory Management in GPUs for Irregular Workloads")]),e._v(" "),i("li",[e._v("An Intelligent Framework for Oversubscription Management in CPU-GPU Unified Memory")]),e._v(" "),i("li",[e._v("Architectural Support for Address Translation on GPUs Designing Memory Management Units for CPU/GPUs with Unified Address Spaces")]),e._v(" "),i("li")]),e._v(" "),i("hr"),e._v(" "),i("p",[i("strong",[e._v("Unified Memory History")]),e._v("\ncopied from "),i("em",[i("strong",[e._v("Evolution of Nvidia GPU from microarchitectures Pascal to Ampere")])])]),e._v(" "),i("p",[e._v("CUDA 4 introduced UVA (Unified Virtual Addressing) to provide a single virtual memory address space for both CPU and GPU memory and enable pointers to be accessed from GPU code no matter where in the system they reside. UVA enables Zero-Copy memory, a pinned CPU memory accessible by GPU code directly, over PCIe, without the need for memory copy. This provides some of the convince of Unified Memory, but at the cost of worse performance, because GPU always accesses it with PCIeâ€™s low bandwidth and high latency.[1]")]),e._v(" "),i("p",[e._v("Later, CUDA 6 introduced Unified Memory, which creates a pool of managed memory that programs running on the CPU and GPU can access without explicit data movement. However, only when CPU and GPU processes are not running together because of the limitation of the Kepler and Maxwell GPU microarchitecture. Also, the Unified Memory address space was limited to the size of the GPU memory.[1, 3]")]),e._v(" "),i("p",[e._v("CUDA 8 and Pascal microarchitectures improve Unified Memory functionality by adding 49-bit virtual addressing and page faulting capability. The larger 49-bit virtual addresses are sufficient to enable GPUs to access the entire system memory plus the memory of all GPUs in the system. Because of the memory page faulting functionality, the CUDA system software does not need to synchronize all managed memory allocations to the GPU before each kernel lunch. Instead, when a thread running on GPU faults on non-resident memory access, it stalls until the page can be migrated and the page table updated. Alternatively, the page may be mapped for remote access over PCIe or NVLink interconnects.[1, 3, 6]")]),e._v(" "),i("p",[e._v("These new features of Unified Memory enable oversubscription of memory, which means that application running on a GPU can use data sets larger than ten their device memory.[1] While the Unified Memory model makes GPU programming more convenient, it comes at a cost; handling page faults and page migrations can be expensive. CUDA 8 addresses this issue with features like prefetch and memory advice.")]),e._v(" "),i("hr"),e._v(" "),i("h3",{attrs:{id:"_1-holistic-performance-analysis-and-optimization-of-unified-virtual-holistic-performance-analysis-and-optimization-of-unified-virtual-memory"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-holistic-performance-analysis-and-optimization-of-unified-virtual-holistic-performance-analysis-and-optimization-of-unified-virtual-memory"}},[e._v("#")]),e._v(" 1. Holistic Performance Analysis and Optimization of Unified Virtual Holistic Performance Analysis and Optimization of Unified Virtual Memory")]),e._v(" "),i("p",[e._v("Same author with "),i("strong",[e._v("In-Depth Analyses of Unified Virtual Memory System for GPU Accelerated Computing")])])])}),[],!1,null,null,null);i.default=n.exports}}]);