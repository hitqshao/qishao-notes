(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{431:function(e,s,t){"use strict";t.r(s);var a=t(5),n=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"chap5-llvm-intermediate-representation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chap5-llvm-intermediate-representation"}},[e._v("#")]),e._v(" Chap5. LLVM Intermediate Representation")]),e._v(" "),s("h4",{attrs:{id:"_1-this-ir-has-three-equivalent-forms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-this-ir-has-three-equivalent-forms"}},[e._v("#")]),e._v(" 1.  This IR has three equivalent forms:"),s("br")]),e._v(" "),s("p",[e._v("• An in-memory representation (the Instruction class, among others)"),s("br"),e._v("\n• An on-disk representation that is encoded in a space-efficient form  (the bitcode files)"),s("br"),e._v("\n• An on-disk representation in a human-readable text form (the LLVM assembly files)"),s("br")]),e._v(" "),s("h4",{attrs:{id:"_2-llvm-still-conveys-some-target-specific-aspects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-llvm-still-conveys-some-target-specific-aspects"}},[e._v("#")]),e._v(" 2. LLVM still conveys some target-specific aspects"),s("br")]),e._v(" "),s("p",[e._v("Program might implicitly include target-specific headers, like "),s("strong",[e._v("bits")]),e._v(" linux header folder.")]),e._v(" "),s("h4",{attrs:{id:"_3-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-commands"}},[e._v("#")]),e._v(" 3. commands"),s("br")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("clang *.c -emit-llvm -c -o *.bc\nclang *.c -emit-llvm -S -c -o *.ll\nllvm-as *.ll -o *.bc\nllvm-dis *.bc -o *.ll\n\n//extract function from IR module\nllvm-extract -func=* *.bc -o *.bc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("h4",{attrs:{id:"_4-llvm-ir-language-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-llvm-ir-language-syntax"}},[e._v("#")]),e._v(" 4. LLVM IR Language Syntax"),s("br")]),e._v(" "),s("p",[e._v("module -> function -> block -> instruction\n• SSA(Static Single Assignment) Form\n• Thress Address Instruction\n• Infinite number of registers")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"\n\n// type:<size>:<abi>:<preferred>\n// pointer 64bit 64bit 64 bit\n// p:64:64:64\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h4",{attrs:{id:"_5-introducing-llvm-ir-in-memory-model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-introducing-llvm-ir-in-memory-model"}},[e._v("#")]),e._v(" 5. Introducing llvm IR in-memory model"),s("br")]),e._v(" "),s("ul",[s("li",[e._v("Module"),s("br"),e._v(" "),s("ul",[s("li",[e._v("Module::iterator iterates across functions in the module"),s("br")]),e._v(" "),s("li",[e._v("begin(); end();"),s("br")])])]),e._v(" "),s("li",[e._v("Function"),s("br"),e._v(" "),s("ul",[s("li",[e._v("isDeclaration()"),s("br")]),e._v(" "),s("li",[e._v("getArgumentList() or arg_begin(), arg_end()"),s("br")]),e._v(" "),s("li",[e._v("Iterate through blocks: for (Function::iterator i = function.begin(), e = function.end(); i != e; ++i)"),s("br")])])]),e._v(" "),s("li",[e._v("BasicBlock"),s("br"),e._v(" "),s("ul",[s("li",[e._v("encapsulate all instructions")]),e._v(" "),s("li",[e._v("iterates thorugh begin() and end()")]),e._v(" "),s("li",[e._v("access predecessor or list through getSinglePredecessor")])])]),e._v(" "),s("li",[e._v("Instruction"),s("br"),e._v(" "),s("ul",[s("li",[e._v("Predicates: isAssociative(), isCommutative(), isIdempotent(), or isTerminator()")]),e._v(" "),s("li",[e._v("getOpCode()")]),e._v(" "),s("li",[e._v("access Operands() through op_begin() and op_end()"),s("br")])])]),e._v(" "),s("li",[s("strong",[e._v("Most powerful Value and User Interface")]),e._v(" "),s("ul",[s("li",[e._v("Function and Intruction are subclasses of both Value and User.")]),e._v(" "),s("li",[e._v("BasicBlock is a subclass of Value")]),e._v(" "),s("li",[e._v("Value and User and be navigate through use-def and def-use chain")]),e._v(" "),s("li",[e._v("Value defines a result can be used by others")]),e._v(" "),s("li",[e._v("User means that this entity use one or more Value Interface.")])])]),e._v(" "),s("li",[e._v("Value & User\n"),s("ul",[s("li",[e._v("Value defines use_begin() and use_end() to iterate through all Users "),s("strong",[e._v("def-use chain")])]),e._v(" "),s("li",[e._v("ReplaceAllUsesWith(Value *)")]),e._v(" "),s("li",[e._v("User defines op_begin() and op_end() access all of the Value Interface it uses "),s("strong",[e._v("use-def chain")])]),e._v(" "),s("li",[e._v("ReplaceUsesOfWith(Value *From, Value *To)")])])])]),e._v(" "),s("h4",{attrs:{id:"_6-compile-time-and-link-time-optimization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-compile-time-and-link-time-optimization"}},[e._v("#")]),e._v(" 6. Compile-time and Link time Optimization"),s("br")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("opt -O3 sum.bc -o sum-O3.bc\nopt -std-compile-opts sum.bc -o sum-stdc.bc\n\nllvm-link file1.bc file2.bc file3.bc -o=all.bc\nopt -std-link-opts all.bc -o all-stdl.bc\n\nopt sum.bc -mem2reg -instcount -o sum-tmp.bc -stats\nopt sum.bc -time-passes -domtree -instcount -o sum-tmp.bc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("h4",{attrs:{id:"_7-discovering-which-passes-matter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-discovering-which-passes-matter"}},[e._v("#")]),e._v(" 7. Discovering which passes matter"),s("br")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("opt -O1 sum-O0.ll -S -o sum-O1.ll\n\nclang -Xclang -print-stats -emit-llvm -O1 sum.c -c -o sum-O1.bc\n\nopt sum-O0.ll -stats -mem2reg -o sum-O1.ll\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h4",{attrs:{id:"_8-pass-dependencies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-pass-dependencies"}},[e._v("#")]),e._v(" 8. Pass Dependencies"),s("br")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// full list of passes used when you request just the mem2reg pass\nopt sum-O0.ll -debug-pass=Structure -mem2reg -S -o sum-O1.ll\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h4",{attrs:{id:"_9-pass-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-pass-api"}},[e._v("#")]),e._v(" 9. Pass API"),s("br")]),e._v(" "),s("ul",[s("li",[e._v("ModulePass runOnModule()")]),e._v(" "),s("li",[e._v("FunctionPass runOnFuction()")]),e._v(" "),s("li",[e._v("BasicBlockPass runOnBasicBlock()")])]),e._v(" "),s("p",[e._v("If Unchanged, return false. Or else, return true.\n10.")])])}),[],!1,null,null,null);s.default=n.exports}}]);