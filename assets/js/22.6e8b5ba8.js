(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{431:function(t,e,i){"use strict";i.r(e);var n=i(5),o=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"chap6-the-backend"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chap6-the-backend"}},[t._v("#")]),t._v(" Chap6. The Backend")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/hitqshao/qishao-notes/assets/23403286/a5566aac-5d9f-40c4-810b-ec6572a3e94f",alt:"image"}})]),t._v(" "),e("p",[e("strong",[t._v("White box")]),t._v(" Essential\n"),e("strong",[t._v("Gray Block")]),t._v(" For generated code efficiency")]),t._v(" "),e("ol",[e("li",[t._v("Instructon Selection"),e("br")])]),t._v(" "),e("ul",[e("li",[t._v("Convert IR to target-specific SelectionDAG(Directed Acyclic Graph)\n"),e("ul",[e("li",[t._v("Block->DAG")]),t._v(" "),e("li",[t._v("Instruction->Node")]),t._v(" "),e("li",[t._v("Edge contains dataflow dependence and control dependence and glue.")])])]),t._v(" "),e("li",[t._v("LLVM use DAG to employ tree-based pattern-matching instruction selection.")]),t._v(" "),e("li",[t._v("IN the end of this phase, IR node are converted to target-machine(machine instructions) nodes.")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Pre-register Allocation(RA) scheduling,the first instruction scheduling."),e("br")])]),t._v(" "),e("ul",[e("li",[t._v("This is to explore instruction-level parallelism")]),t._v(" "),e("li",[t._v("The instructions are converted to MachineInstr three-address representation.")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Reguster Allocation"),e("br")]),t._v(" "),e("li",[t._v("Post-register Allocation(RA) Instruction Scheduling, the second instruction scheduling")])]),t._v(" "),e("ul",[e("li",[t._v("Now we have real register information, we can combine information of extra hazards and delays of real register to opmitize code.")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("Code Emission")])]),t._v(" "),e("ul",[e("li",[t._v("Convert MachineInstr to MCInst")]),t._v(" "),e("li",[t._v("Emit Assembly Code")]),t._v(" "),e("li",[t._v("Emit Binary blobs to object code format")])])])}),[],!1,null,null,null);e.default=o.exports}}]);