(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{483:function(s,e,t){"use strict";t.r(e);var a=t(8),n=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"chapter-1-toy-language-and-ast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chapter-1-toy-language-and-ast"}},[s._v("#")]),s._v(" Chapter 1. Toy Language and AST")]),s._v(" "),e("p",[s._v("Lexer and recursive descent parser construt AST")]),s._v(" "),e("h3",{attrs:{id:"chapter-2-emit-basic-mlir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-emit-basic-mlir"}},[s._v("#")]),s._v(" Chapter 2. Emit Basic MLIR")]),s._v(" "),e("p",[s._v("Operations: instructions, globals(functions), modules, in LLVM")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://github.com/user-attachments/assets/1547200e-1e13-4075-b202-77be37cf0b74",alt:"image"}}),s._v("\nFrom "),e("a",{attrs:{href:"https://medium.com/sniper-ai/mlir-tutorial-create-your-custom-dialect-lowering-to-llvm-ir-dialect-system-1-1f125a6a3008",target:"_blank",rel:"noopener noreferrer"}},[s._v("link"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("Transpose Operation")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('%t_tensor = "toy.transpose"(%tensor) {inplace = true} : (tensor<2x3xf64>) ->\ntensor<3x2xf64> loc("example/file/path":12:1)\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("meaning of each part")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("result  = name of operation (input operands) dictionary of traits :\ntype of operations (input and output), location\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("A name for the operation.")]),s._v(" "),e("li",[s._v("A list of SSA operand values.")]),s._v(" "),e("li",[s._v("A list of attributes.")]),s._v(" "),e("li",[s._v("A list of types for result values.")]),s._v(" "),e("li",[s._v("A source location for debugging purposes.")]),s._v(" "),e("li",[s._v("A list of successors blocks (for branches, mostly).")]),s._v(" "),e("li",[s._v("A list of regions (for structural operations like functions).")])]),s._v(" "),e("p",[e("strong",[s._v("Opaque API")])]),s._v(" "),e("p",[e("strong",[s._v("Define a Toy Dialect")])]),s._v(" "),e("p",[s._v("dialect could be defined by c++ or tablegen(declarative specification).")]),s._v(" "),e("p",[s._v("after the definiation, it could be loaded to MLIR Context.\ncontext.loadDialect"),e("ToyDialect",[s._v("();")])],1),s._v(" "),e("p",[e("strong",[s._v("Defining Toy Operations")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class ConstantOp : public mlir::Op<\n                     /// `mlir::Op` is a CRTP class, meaning that we provide the\n                     /// derived class as a template parameter.\n                     ConstantOp,\n                     /// The ConstantOp takes zero input operands.\n                     mlir::OpTrait::ZeroOperands,\n                     /// The ConstantOp returns a single result.\n                     mlir::OpTrait::OneResult,\n                     /// We also provide a utility `getType` accessor that\n                     /// returns the TensorType of the single result.\n                     mlir::OpTraits::OneTypedResult<TensorType>::Impl> {\n\n public:\n  /// Inherit the constructors from the base Op class.\n  using Op::Op;\n  ...\n  static void build(mlir::OpBuilder &builder, mlir::OperationState &state,\n                    mlir::Type result, mlir::DenseElementsAttr value);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[s._v("register operation:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void ToyDialect::initialize() {\n  addOperations<ConstantOp>();\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("Op vs Operation: Using MLIR Operations")])]),s._v(" "),e("p",[e("strong",[s._v("Using Operation Definition Specification Framwork")])]),s._v(" "),e("p",[s._v("base Toy_Op")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Toy_Op<string mnemonic, list<Trait> traits = []> :\n    Op<Toy_Dialect, mnemonic, traits>;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("ConstantOp")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('def ConstantOp : Toy_Op<"constant"> {\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);