(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{482:function(n,s,e){"use strict";e.r(s);var t=e(8),a=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code")]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"})])]),n._v(" "),s("h2",{attrs:{id:"lowering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lowering"}},[n._v("#")]),n._v(" Lowering")]),n._v(" "),s("h3",{attrs:{id:"_1-declaration-of-oprator-and-conversion-pass"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-declaration-of-oprator-and-conversion-pass"}},[n._v("#")]),n._v(" 1. Declaration of oprator and conversion pass")]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('       \n// include/tpu_mlir/Dialect/Tpu/IR/TpuOps.td\nclass Tpu_ConvOp<string mnemonic, list<Trait> traits = []> : Tpu_Op<mnemonic,\n    !listconcat(traits, [SupportFuseRelu,\n    DeclareOpInterfaceMethods<TypeInterface>,\n    DeclareOpInterfaceMethods<LocalGenInterface, ["BackwardH"]>])> {\n  let summary = "convolution operator";\n\n  let description = [{\n  }];\n\n  let arguments = (ins\n    AnyTensor:$input,\n    AnyTensor:$filter,\n    AnyTensorOrNone:$bias,\n    I64ArrayAttr:$kernel_shape,\n    I64ArrayAttr:$strides,\n    I64ArrayAttr:$pads, // top,left,bottom,right\n    DefaultValuedAttr<I64Attr, "1">:$group,\n    OptionalAttr<I64ArrayAttr>:$dilations,\n    OptionalAttr<I64ArrayAttr>:$inserts,\n    DefaultValuedAttr<BoolAttr, "false">:$do_relu,\n    DefaultValuedAttr<F64Attr, "-1.0">:$relu_limit,\n    //new param\n    BoolAttr:$with_bias,\n    DefaultValuedAttr<BoolAttr, "false">:$coeff_merged,\n    DefaultValuedAttr<I64Attr, "0">:$use_3ic_optimize,\n    DefaultValuedAttr<I64Attr, "0">:$kernel_zp,\n    OptionalAttr<I64ArrayAttr>:$multiplier,\n    OptionalAttr<I64ArrayAttr>:$rshift,\n    DefaultValuedAttr<Tpu_RequantModeAttr, "tpu::RequantMode::Normal">:$quant_mode,\n    OptionalAttr<Tpu_LayerGroupAttr>:$ginfo\n  );\n\n  let results = (outs AnyTensor:$output);\n  let extraClassDeclaration = [{\n    conv_attr_t parseParam();\n  }];\n}\n\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br")])])]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v('\n```\n// include/tpu_mlir/Conversion/Passes.td\ndef ConvertTopToTpu : Pass<"convert-top-to-tpu", "ModuleOp"> {\n  let summary = "Convert top-level Top Ops to Tpu Ops";\n  let constructor = "tpu_mlir::createConvertTopToTpu()";\n  let dependentDialects = ["tpu_mlir::top::TopDialect", "tpu_mlir::tpu::TpuDialect"];\n  let options = [\n    Option<"mode", "mode", "std::string", /*default=*/"",\n           "default quantization mode: INT8/BF16/F32">,\n    Option<"qtable", "qtable", "std::string", /*default=*/"",\n           "a table of Ops that quantized to specific mode">,\n    Option<"chip", "chip", "std::string", /*default=*/"",\n           "chip: cv183x/cv182x/bm1684/bm1684x">,\n    Option<"isAsymmetric", "asymmetric", "bool", /*default=*/"false",\n           "true for asymmetric quantization, or false for symmetric">,\n  ];\n}\n```\n')]),n._v(" "),s("h3",{attrs:{id:"_2-implementation-of-lowering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-implementation-of-lowering"}},[n._v("#")]),n._v(" 2. Implementation of lowering")]),n._v(" "),s("p",[n._v("TopLowering is derived from mlir::OpRewritePattern")]),n._v(" "),s("p",[n._v("Each OPLowering will be declared.")]),n._v(" "),s("p",[n._v("include/tpu_mlir/Conversion/TopToTpu")]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('// TopLowering.h\ntemplate <typename OpTy> class TopLowering : public OpRewritePattern<OpTy> {\npublic:\n  using OpRewritePattern<OpTy>::OpRewritePattern;\n\n  LogicalResult matchAndRewrite(OpTy opTy,\n                                PatternRewriter &rewriter) const override {\n...\n  virtual void LoweringINT8(PatternRewriter &rewriter, OpTy opTy,\n                            bool asymmetric) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringINT4(PatternRewriter &rewriter, OpTy opTy,\n                            bool asymmetric) const {\n    LoweringINT8(rewriter, opTy, asymmetric);\n  }\n  virtual void LoweringBF16(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringF16(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringF32(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n  virtual void LoweringQuantized(PatternRewriter &rewriter, OpTy opTy) const {\n    llvm_unreachable("Not Implemented");\n  }\n                                \n}\n\n// LoweringBM1684X.h\n#define LOWERING_BM1684X(OP)                                                   \\\n  struct OP##Lowering : public TopLowering<top::OP##Op> {                      \\\n    OP##Lowering(MLIRContext *ctx) : TopLowering<top::OP##Op>(ctx) {}          \\\n    void LoweringINT8(PatternRewriter &rewriter, top::OP##Op op,               \\\n                      bool asymmetric) const override;                         \\\n    void LoweringINT4(PatternRewriter &rewriter, top::OP##Op op,               \\\n                      bool asymmetric) const override;                         \\\n    void LoweringBF16(PatternRewriter &rewriter,                               \\\n                      top::OP##Op op) const override;                          \\\n    void LoweringF16(PatternRewriter &rewriter,                                \\\n                     top::OP##Op op) const override;                           \\\n    void LoweringF32(PatternRewriter &rewriter,                                \\\n                     top::OP##Op op) const override;                           \\\n    void LoweringQuantized(PatternRewriter &rewriter,                          \\\n                           top::OP##Op op) const override;                     \\\n  };\n\nLOWERING_BM1684X(Abs)\nLOWERING_BM1684X(Add)\nLOWERING_BM1684X(AddConst)\nLOWERING_BM1684X(AvgPool)\nLOWERING_BM1684X(Cast)\nLOWERING_BM1684X(Concat)\nLOWERING_BM1684X(Conv)\nLOWERING_BM1684X(Deconv)\nLOWERING_BM1684X(Depth2Space)\nLOWERING_BM1684X(Div)\nLOWERING_BM1684X(Exp)\nLOWERING_BM1684X(Gather)\nLOWERING_BM1684X(GRU)\n\n...\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br"),s("span",{staticClass:"line-number"},[n._v("56")]),s("br"),s("span",{staticClass:"line-number"},[n._v("57")]),s("br"),s("span",{staticClass:"line-number"},[n._v("58")]),s("br"),s("span",{staticClass:"line-number"},[n._v("59")]),s("br"),s("span",{staticClass:"line-number"},[n._v("60")]),s("br"),s("span",{staticClass:"line-number"},[n._v("61")]),s("br"),s("span",{staticClass:"line-number"},[n._v("62")]),s("br"),s("span",{staticClass:"line-number"},[n._v("63")]),s("br"),s("span",{staticClass:"line-number"},[n._v("64")]),s("br"),s("span",{staticClass:"line-number"},[n._v("65")]),s("br")])])]),n._v(" "),s("p",[n._v("Then in ./lib/Conversion/TopToTpu/BM1684X/\neach operator will include a *.cpp that implement LoweringFunction.\n"),s("img",{attrs:{src:"https://github.com/user-attachments/assets/40cfb7b3-84e3-453f-8907-ee3237a1aeca",alt:"image"}})]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('void ConvLowering::LoweringF32(PatternRewriter &rewriter,\n                               top::ConvOp op) const {\n  rewriter.setInsertionPointAfter(op);\n  std::vector<Value> operands;\n  const int nInputs = op->getNumOperands();\n  for (auto i = 0; i < nInputs; ++i) {\n    operands.push_back(op->getOperand(i));\n  }\n  std::vector<NamedAttribute> attrs;\n  for (auto &attr : op->getAttrs()) {\n    attrs.push_back(attr);\n  }\n  bool with_bias = !op.getBias().getType().isa<mlir::NoneType>();\n  attrs.push_back(\n      rewriter.getNamedAttr("with_bias", rewriter.getBoolAttr(with_bias)));\n  auto newValue =\n      CreateConvOp(rewriter, op.getKernelShape().size(), op->getLoc(),\n                   op.getOutput().getType(), operands, attrs);\n  rewriter.replaceOp(op, {newValue});\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])])]),n._v(" "),s("h3",{attrs:{id:"_3-lowering-in-converttoptotpu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-lowering-in-converttoptotpu"}},[n._v("#")]),n._v(" 3. Lowering in ConvertTopToTPU")]),n._v(" "),s("p",[s("strong",[n._v("bm1684x::populateTopToTpuConversionPatterns(&patterns);")])]),n._v(" "),s("p",[s("strong",[n._v("Reuse applyPatternsAndFoldGreedily")])]),n._v(" "),s("p",[n._v("lib/Conversion/TopToTPU/TopToTPUPass.cpp")]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('struct ConvertTopToTpu : public ::impl::ConvertTopToTpuBase<ConvertTopToTpu> {\npublic:\n  void runOnOperation() override {\n    RewritePatternSet patterns(ctx_);\n    ConversionTarget target(*ctx_);\n    target.addLegalDialect<tpu::TpuDialect, func::FuncDialect>();\n    // no need to lowering:\n    // Qi Note, add legal op, only NoneOp, InputOp, weightOp\n    target.addLegalOp<top::InputOp, top::WeightOp, top::NoneOp>();\n    if (module::isBM1684XFamily()) {\n      // Qi Note: Call LoweringBM1684X.cpp\n      // AddLowering to the patterns\n      bm1684x::populateTopToTpuConversionPatterns(&patterns);\n    } else if (module::isBM1684Family()) {\n      bm1684::populateTopToTpuConversionPatterns(&patterns);\n    } else if (module::isCV18xx()) {\n      cv18xx::populateTopToTpuConversionPatterns(&patterns);\n    } else {\n      llvm_unreachable("Not Implemented");\n    }\n    auto config = GreedyRewriteConfig();\n    config.maxIterations = 0; // apply each pattern only once.\n    // Qi Node: Apply pattern into module\n    // applyPatternsAndFoldGreedily is provided by MLIR\n    applyPatternsAndFoldGreedily(module_, std::move(patterns), config);\n    patterns.clear();\n    // \n    patterns.add<ForwardTypePattern<tpu::ReshapeOp>>(ctx_);\n    applyPatternsAndFoldGreedily(module_, std::move(patterns));\n    cast_process();\n    relu_process();\n    module::updateModuleTypes();\n    module::setState(module::State::TPU_LOWERED);\n  }\n}\n\n// Qi Node: this function will be called by\n// include/tpu_mlir/Conversion/Passes.td constructor\n// it will create the pass of converting top operator to tpu operator\nstd::unique_ptr<Pass> createConvertTopToTpu() {\n  return std::make_unique<ConvertTopToTpu>();\n}\n\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br")])])]),n._v(" "),s("details",[s("summary",[n._v("Code")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("void populateTopToTpuConversionPatterns(RewritePatternSet *patterns) {\n  patterns->add<\n      // clang-format off\n      AbsLowering,\n      AddLowering,\n      AddConstLowering,\n      AvgPoolLowering,\n      CastLowering,\n      ConcatLowering,\n      ConvLowering,\n      DeconvLowering,\n      Depth2SpaceLowering,\n      DivLowering,\n      ExpLowering,\n      GatherLowering,\n...\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br")])])]),n._v("\nThis process is similar to LLVM pass.\n")])}),[],!1,null,null,null);s.default=a.exports}}]);