(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{453:function(s,n,t){"use strict";t.r(n);var i=t(5),e=Object(i.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("ul",[n("li",[s._v("libcuda\n"),n("ul",[n("li",[s._v("cuda_runtime_api.cc")])])]),s._v(" "),n("li",[s._v("src\n"),n("ul",[n("li",[s._v("abstract_hardware_model.h/cpp")]),s._v(" "),n("li",[s._v("gpgpusim_entrypoint.h/cpp")]),s._v(" "),n("li",[s._v("stream_manager.h/cpp")]),s._v(" "),n("li",[s._v("cuda-sim\n"),n("ul",[n("li",[n("p",[s._v("cuda-sim.h/cc")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void function_info::ptx_assemble() {\n for ( i=m_instructions.begin(); i != m_instructions.end(); i++ ) {\n  g_pc_to_finfo[PC] = this;\n  m_instr_mem[n] = pI;\n  s_g_pc_to_insn.push_back(pI);\n  ssert(pI == s_g_pc_to_insn[PC]);\n  pI->set_m_instr_mem_index(n);\n  pI->set_PC(PC);\n }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("memory.h/cc")])]),s._v(" "),n("li",[n("p",[s._v("opcode.h/def")])]),s._v(" "),n("li",[n("p",[s._v("ptx_loader.h/cc")])]),s._v(" "),n("li",[n("p",[s._v("ptx.y"),n("br"),s._v("\nIt is a Yacc/Bison grammar file used to parse PTX (Parallel Thread Execution) assembly code, which is a low-level intermediate representation used by NVIDIA GPUs."),n("br"),s._v("\nIt defines the grammar rules for PTX assembly code and specifies how different components of PTX code should be interpreted and processed."),n("br"),s._v("\nThis includes recognizing various PTX instructions, operands, directives, and control structures, and translating them into an internal representation that the simulator can work with.")]),s._v(" "),n("p",[s._v("When it meets instruction statement it will call add_instruction.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("statement_list: directive_statement { add_directive(); }\n| instruction_statement { add_instruction();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("ptx_parser.h/cc\nthe add_instruction used in ptx.y will call the following instruction.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void add_instruction() \n{\nptx_instruction *i = new ptx_instruction(**);\ng_instructions.push_back(i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("in the end of function it will add all the instructins into function infomation")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("void end_function()\n{\n...\ng_func_info->add_inst( g_instructions );\n...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("ptx_ir.h")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("...\nstd::vector<const symbol*> m_args;\n// end_function will put function into this list\nstd::list<ptx_instruction*> m_instructions;\nstd::vector<basic_block_t*> m_basic_blocks;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("ptx_sim.h/cc")])])])]),s._v(" "),n("li",[s._v("gpgpu-sim\n"),n("ul",[n("li",[s._v("gpgpu-sim.h/cc")]),s._v(" "),n("li",[s._v("shader.h/shader.cc")]),s._v(" "),n("li",[s._v("mem_fetch.h/cc")]),s._v(" "),n("li",[s._v("stack.h/cc")]),s._v(" "),n("li",[s._v("addrdec.h/cc")]),s._v(" "),n("li",[s._v("dram.h/cc")]),s._v(" "),n("li",[s._v("traffic_breakdown.h/cc")])])])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);